{"version":3,"sources":["components/Navbar/NavBar.module.css","components/Login/Login.module.css","components/profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Common/Preloader/Preloader.tsx","components/profile/wall/Post/Post.module.css","components/Dialogs/Dialogs.module.css","components/Dialogs/SendMessege/SendMessage.module.css","components/Header/Header.module.css","components/profile/wall/Send/Send.module.css","components/Common/Preloader/Preloader.module.css","API/api.tsx","assets/unnamed.jpg","Utils/helpers/object-helper.js","redux/friendsPage-reducer.ts","components/Dialogs/Message/Message.module.css","components/profile/Profile.module.css","components/profile/wall/Wall.module.css","serviceWorker.js","redux/profilePage-reducer.ts","redux/sidebar-reducer.tsx","redux/dialogsPage-reducer.ts","redux/auth-reducer.ts","redux/App-reducer.ts","redux/redux-store.tsx","components/Navbar/NavBar.tsx","components/News/News.tsx","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/SendMessege/SendMessage.tsx","components/Dialogs/Dialogs.tsx","components/HOC/WithAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/wall/Post/Post.tsx","components/profile/wall/Send/Send.tsx","components/profile/wall/Wall.tsx","components/profile/wall/WallContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.js","index.js"],"names":["module","exports","Preloader","props","className","styles","wrapperPreloader","ldsSpinner","ResultCodes","ResultCodeForCaptcha","instance","axios","create","baseURL","withCredentials","headers","friendsAPI","getUsers","pageSize","pageNum","get","then","response","data","unfollow","userId","delete","follow","post","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photo","formData","FormData","append","saveProfile","authAPI","setProfileData","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptcha","updateObjectInArray","items","itemProp","requiredProp","newObj","map","item","initialState","users","totalUsers","currentPage","isFetching","followingInProgress","actionsFriends","id","type","dispatch","a","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","success","bind","friendsPageReducer","state","action","followed","filter","Boolean","window","location","hostname","match","postsData","message","counterLike","userProfile","userStatus","actionsProfile","newPost","user","photos","getUser","getUserData","profilePageReducer","sideBarReducer","messagesData","dialogsData","name","dialogsPageReducer","textMess","isAuth","captchaUrl","actionsAuth","payload","setUserData","userData","getCaptchaData","url","authReducer","initialized","actionsApp","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sideBar","friendsPage","auth","app","store","createStore","compose","applyMiddleware","thunk","Nav","c","nav","to","activeClassName","active","News","DialogItem","classes","dialog","pic","img","src","activ","link","lastmessage","Message","messageMY","SendMessage","onSubmit","useForm","register","handleSubmit","errors","text","placeholder","ref","required","maxLength","value","btn","newMessage","error","Send","reset","addMessageWrapper","e","target","addMessage","Dialogs","dialogsElement","d","key","messagesElement","m","dialogs_wrapper","dialogs","messages","sendmessage","mapStateToProps","Component","connect","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","ifOwner","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","updateStatusUser","ProfileDataForm","profile","defaultValue","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","onClick","ProfileData","title","editModeOn","Contact","contact","ProfileInfo","profileInfoWrapper","picture","large","withPhoto","alt","files","length","info","Post","React","memo","like","SendPost","messageText","addPostsWrapper","addPost","Wall","postsElement","p","posts","Profile","profileWrapper","WallContainer","ProfileContainer","this","params","history","push","getStatusUser","refreshProfile","prevProps","withRouter","getStatusUserData","savePhotoData","getState","Header","header","tect","HeaderContainer","logoutUser","LoginForm","wrapperInput","loginUser","loginUserData","outerWrapperLogin","innerWrapperLogin","FriendsContainer","lazy","App","initializeApp","NavBar","fallback","path","render","DialogsContainer","form","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.fd028139.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1gTnw\",\"item\":\"NavBar_item__2NwSJ\",\"active\":\"NavBar_active__mjLtP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"innerWrapperLogin\":\"Login_innerWrapperLogin__dik2Y\",\"wrapperInput\":\"Login_wrapperInput__2Qpsh\",\"error\":\"Login_error__3X-sc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__2B19g\",\"picture\":\"ProfileInfo_picture__1OEWa\",\"info\":\"ProfileInfo_info__2PY1l\",\"contact\":\"ProfileInfo_contact__1IJFS\",\"status\":\"ProfileInfo_status__3gYpu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__3XcMq\",\"link\":\"DialogsItem_link__3SqSi\",\"dlink\":\"DialogsItem_dlink__6EJUX\",\"pic\":\"DialogsItem_pic__1v1z7\",\"img\":\"DialogsItem_img__l8jrz\",\"activ\":\"DialogsItem_activ__2j2NV\"};","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\ntype props = {}\r\nconst Preloader = (props: props) => {\r\n\r\n    return (\r\n        <div className={styles.wrapperPreloader}>\r\n            <div className={styles.ldsSpinner}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__1NAXY\",\"text\":\"Post_text__2qe6S\",\"massage\":\"Post_massage__1v8Pc\",\"like\":\"Post_like__1HqAT\",\"img\":\"Post_img__2kYt5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__2eMF_\",\"dialogs\":\"Dialogs_dialogs__2polH\",\"messages\":\"Dialogs_messages__2pxkQ\",\"sendmessage\":\"Dialogs_sendmessage__zUs3_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addMessageWrapper\":\"SendMessage_addMessageWrapper__3TAsY\",\"text\":\"SendMessage_text__3Rm2s\",\"error\":\"SendMessage_error__vd-Gr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2ykjx\",\"img\":\"Header_img__3qCtE\",\"tect\":\"Header_tect__Fee6x\",\"login\":\"Header_login__7YMh6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostsWrapper\":\"Send_addPostsWrapper__1OGVb\",\"text\":\"Send_text__2sk9N\",\"btn\":\"Send_btn__3Qzfs\",\"error\":\"Send_error__1qTaf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperPreloader\":\"Preloader_wrapperPreloader__QTdi9\",\"ldsSpinner\":\"Preloader_ldsSpinner__J6dcU\"};","import axios from 'axios'\r\nimport {PhotosType, UserProfileType, UserType} from '../types/types'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '02b9c283-65ab-4aa6-9c25-cf1f7a717d1b'}\r\n})\r\n\r\nexport enum ResultCodes {\r\n    success = 0,\r\n    error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\ninterface GetUsers {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\ninterface IResponse {\r\n    resultCode: ResultCodes\r\n    messages: Array<string | void>\r\n    data: Object\r\n}\r\n\r\nexport const friendsAPI = {\r\n    getUsers(pageSize: number, pageNum: number) {\r\n        return instance.get<GetUsers>(`users?count=${pageSize}&page=${pageNum}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<IResponse>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<IResponse>(`follow/${userId}`).then(response => response.data)\r\n    }\r\n}\r\n\r\ninterface ISavePhoto extends IResponse {\r\n    data: { photos: PhotosType }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<UserProfileType>('profile/' + userId).then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>('profile/status/' + userId).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<IResponse>('profile/status/', {status}).then(response => response.data)\r\n    },\r\n    savePhoto(photo: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', photo)\r\n        return instance.put<ISavePhoto>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(formData: any) {\r\n        return instance.put<IResponse>('profile', formData).then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\ninterface IMe extends IResponse {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n}\r\n\r\ninterface ILogin {\r\n    messages: Array<string | void>\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: ResultCodeForCaptcha | ResultCodes\r\n}\r\n\r\nexport const authAPI = {\r\n    setProfileData() {\r\n        return instance.get<IMe>(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ILogin>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<IResponse>(`auth/login`).then(response => response.data)\r\n    }\r\n}\r\n\r\ninterface ICaptchs {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<ICaptchs>(`security/get-captcha-url`).then(response => response.data)\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/unnamed.11fdd540.jpg\";","export const updateObjectInArray = (items, itemProp, requiredProp, newObj) => {\r\n    return items.map(item => {\r\n        if (item[itemProp] === requiredProp) {\r\n            return {...item, ...newObj}\r\n        }\r\n        return item\r\n    })\r\n}\r\n","import {friendsAPI, ResultCodes} from '../API/api'\r\nimport {updateObjectInArray} from '../Utils/helpers/object-helper'\r\nimport {UserType} from '../types/types'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {ThunkAction} from 'redux-thunk'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    totalUsers: 1,\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst friendsPageReducer = (state = initialState, action: Actions): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'friends/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, 'id', action.id, {followed: true})\r\n            }\r\n        }\r\n        case 'friends/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, 'id', action.id, {followed: false})\r\n            }\r\n        }\r\n        case 'friends/SET_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case 'friends/SET_CURRENT_PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case 'friends/SET_TOTAL_USERS_COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsers: action.totalUsers\r\n            }\r\n        }\r\n        case 'friends/TOGGLE_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case 'friends/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(userId => userId !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsFriends>\r\n\r\nexport const actionsFriends = {\r\n    followAccess: (id: number) => ({type: 'friends/FOLLOW', id} as const),\r\n    unfollowAccess: (id: number) => ({type: 'friends/UNFOLLOW', id} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'friends/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'friends/SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsers: number) => ({type: 'friends/SET_TOTAL_USERS_COUNT', totalUsers} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'friends/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'friends/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\ntype DispatchType = Dispatch<Actions>\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport const getUsers = (pageSize: number = 10, pageNum: number = 1): ThunkActionType => {\r\n\r\n    return async (dispatch: DispatchType) => {\r\n        dispatch(actionsFriends.toggleIsFetching(true))\r\n        dispatch(actionsFriends.setCurrentPage(pageNum))\r\n\r\n        const data = await friendsAPI.getUsers(pageSize, pageNum)\r\n        dispatch(actionsFriends.toggleIsFetching(false))\r\n        dispatch(actionsFriends.setUsers(data.items))\r\n        dispatch(actionsFriends.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (userId: number) => Actions) => {\r\n\r\n    dispatch(actionsFriends.toggleFollowingInProgress(true, userId))\r\n\r\n    const followUnfollowFlowData = await apiMethod(userId)\r\n\r\n    if (followUnfollowFlowData.resultCode === ResultCodes.success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actionsFriends.toggleFollowingInProgress(false, userId))\r\n}\r\nexport const unfollow = (userId: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, friendsAPI.unfollow.bind(friendsAPI), actionsFriends.unfollowAccess)\r\n    }\r\n}\r\nexport const follow = (userId: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, friendsAPI.follow.bind(friendsAPI), actionsFriends.followAccess)\r\n    }\r\n}\r\n\r\nexport default friendsPageReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageMY\":\"Message_messageMY__1vD-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__1VAZH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Wall_posts__3HvDI\",\"item\":\"Wall_item__YuuOC\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import {profileAPI, ResultCodes} from '../API/api'\r\nimport {PhotosType, PostDataType, UserProfileType} from '../types/types'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: 'i dont know', counterLike: 2},\r\n        {id: 2, message: 'what?', counterLike: 1}\r\n    ] as Array<PostDataType>,\r\n    userProfile: null as null | UserProfileType,\r\n    userStatus: ''\r\n}\r\n\r\nexport type InitialStateProfileType = typeof initialState\r\n\r\nconst profilePageReducer = (state = initialState, action: Actions): InitialStateProfileType => {\r\n    switch (action.type) {\r\n        case 'profile/ADD-POST': {\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {\r\n                    id: 5, message: action.newPost,\r\n                    counterLike: 0\r\n                }]\r\n            }\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {\r\n                ...state,\r\n                userProfile: action.user\r\n            }\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                userStatus: action.status\r\n            }\r\n        }\r\n        case 'profile/SET_PHOTO': {\r\n            return {\r\n                ...state,\r\n                userProfile: {...state.userProfile, photos: action.photos} as UserProfileType\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ThunkActionProfileType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport type Actions = ActionsTypes<typeof actionsProfile>\r\n\r\nexport const actionsProfile = {\r\n    addPost: (newPost: string) => ({type: 'profile/ADD-POST', newPost} as const),\r\n    setUserProfile: (user: UserProfileType) => ({type: 'profile/SET_USER_PROFILE', user} as const),\r\n    setUserStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'profile/SET_PHOTO', photos} as const)\r\n}\r\n\r\nexport const getUser = (userId: number): ThunkActionProfileType => {\r\n    return async (dispatch) => {\r\n        const getUserData = await profileAPI.getProfile(userId)\r\n        dispatch(actionsProfile.setUserProfile(getUserData))\r\n    }\r\n}\r\n\r\nexport const getStatusUser = (userId: number): ThunkActionProfileType => {\r\n    return async (dispatch) => {\r\n        const getStatusUserData = await profileAPI.getStatus(userId)\r\n        dispatch(actionsProfile.setUserStatus(getStatusUserData))\r\n    }\r\n}\r\n\r\nexport const updateStatusUser = (status: string): ThunkActionProfileType => {\r\n    return async (dispatch) => {\r\n        const updateStatusUserData = await profileAPI.updateStatus(status)\r\n        if (updateStatusUserData.resultCode === ResultCodes.success) {\r\n            dispatch(actionsProfile.setUserStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (photo: File): ThunkActionProfileType => async (dispatch) => {\r\n    const savePhotoData = await profileAPI.savePhoto(photo)\r\n    if (savePhotoData.resultCode === ResultCodes.success) {\r\n        dispatch(actionsProfile.savePhotoSuccess(savePhotoData.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (userProfile: UserProfileType): ThunkActionProfileType => async (dispatch, getState) => {\r\n    const id = getState().auth.id\r\n    const saveProfileData = await profileAPI.saveProfile(userProfile)\r\n    if (saveProfileData.resultCode === ResultCodes.success) {\r\n        if (id) dispatch(getUser(id))\r\n    }\r\n}\r\n\r\nexport default profilePageReducer\r\n","let initialState = {}\r\n\r\nconst sideBarReducer = (state = initialState, action: {}) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sideBarReducer\r\n","import {ActionsTypes} from './redux-store'\r\n\r\ntype MessagesDataType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype DialogsDataType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        {id: 1, message: 'AVADA KEDAVRA'},\r\n        {id: 2, message: 'EXPILARMUS'},\r\n        {id: 3, message: 'FLEPENDO'},\r\n        {id: 4, message: 'VINGARDIUM LEVIOSSA'},\r\n        {id: 5, message: 'bukla'}\r\n    ] as Array<MessagesDataType>,\r\n\r\n    dialogsData: [\r\n        {id: 1, name: 'Albus'},\r\n        {id: 2, name: 'Harry'},\r\n        {id: 3, name: 'Germiona'}\r\n    ] as Array<DialogsDataType>\r\n}\r\n\r\nexport type InitialStateDialogs = typeof initialState;\r\n\r\nconst dialogsPageReducer = (state = initialState, action: Actions): InitialStateDialogs => {\r\n    switch (action.type) {\r\n        case 'dialogs/ADD-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: action.textMess}]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsDialogs>\r\n\r\nexport const actionsDialogs = {\r\n    addMessage: (textMess: string) => ({type: 'dialogs/ADD-MESSAGE', textMess} as const)\r\n}\r\n\r\nexport default dialogsPageReducer\r\n","import {authAPI, ResultCodeForCaptcha, ResultCodes, securityAPI} from '../API/api'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\n\r\nexport type InitialStateAuth = {\r\n    id: null | number\r\n    login: null | string\r\n    email: null | string\r\n    isAuth: boolean\r\n    captchaUrl: null | string\r\n}\r\n\r\nlet initialState: InitialStateAuth = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: Actions): InitialStateAuth => {\r\n    switch (action.type) {\r\n        case 'auth/SET_USER_DATE':\r\n        case 'auth/SET_CAPTCHA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsAuth>\r\n\r\nexport const actionsAuth = {\r\n    setCaptchaSuccess: (captchaUrl: string) => ({\r\n        type: 'auth/SET_CAPTCHA',\r\n        payload: {captchaUrl}\r\n    } as const),\r\n    setUserDataAccess: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n        type: 'auth/SET_USER_DATE',\r\n        payload: {id, login, email, isAuth}\r\n    } as const)\r\n}\r\n\r\nexport type ThunkActionAuthType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport const setUserData = (): ThunkActionAuthType => async (dispatch) => {\r\n    const userData = await authAPI.setProfileData()\r\n    if (userData.resultCode === ResultCodes.success) {\r\n        const {id, login, email} = userData.data\r\n        dispatch(actionsAuth.setUserDataAccess(id, login, email, true))\r\n    }\r\n}\r\n\r\nexport const loginUser = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkActionAuthType => async (dispatch) => {\r\n    const loginUserData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginUserData.resultCode === ResultCodes.success) {\r\n        dispatch(setUserData())\r\n    } else if (loginUserData.resultCode === ResultCodeForCaptcha.captcha) {\r\n        dispatch(getCaptcha())\r\n    }\r\n}\r\n\r\nexport const logoutUser = (): ThunkActionAuthType => async (dispatch) => {\r\n    const logoutUserData = await authAPI.logout()\r\n    if (logoutUserData.resultCode === ResultCodes.success) {\r\n        dispatch(actionsAuth.setUserDataAccess(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkActionAuthType => async (dispatch) => {\r\n    const getCaptchaData = await securityAPI.getCaptcha()\r\n    dispatch(actionsAuth.setCaptchaSuccess(getCaptchaData.url))\r\n}\r\n\r\nexport default authReducer\r\n","import {setUserData} from './auth-reducer'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: Actions): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'app/INITIALIZED_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsApp>\r\n\r\nexport const actionsApp = {\r\n    setInitializedSuccess: () => ({type: 'app/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport const initializeApp = (): ThunkActionType => async (dispatch) => {\r\n    await dispatch(setUserData())\r\n    dispatch(actionsApp.setInitializedSuccess())\r\n}\r\n\r\nexport default appReducer\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\r\nimport profilePageReducer from './profilePage-reducer'\r\nimport sideBarReducer from './sidebar-reducer'\r\nimport dialogsPageReducer from './dialogsPage-reducer'\r\nimport friendsPageReducer from './friendsPage-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport thunk from 'redux-thunk'\r\nimport appReducer from './App-reducer'\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sideBar: sideBarReducer,\r\n    friendsPage: friendsPageReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducer = typeof rootReducer\r\n\r\nexport type AppState = ReturnType<RootReducer>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type ActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nconst store = createStore(rootReducer, compose(\r\n    applyMiddleware(\r\n        thunk)\r\n// @ts-ignore\r\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\r\nimport c from './NavBar.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={c.nav}>\r\n            <div className={c.item}>\r\n                <NavLink to='/profile' activeClassName={c.active}>profile</NavLink>\r\n            </div>\r\n\r\n            <div className={c.item}>\r\n                <NavLink to='/news' activeClassName={c.active}>news</NavLink>\r\n            </div>\r\n\r\n            <div className={c.item}>\r\n                <NavLink to='/dialogs' activeClassName={c.active}>dialogs</NavLink>\r\n            </div>\r\n\r\n            <div className={c.item}>\r\n                <NavLink to='/friends' activeClassName={c.active}>friends</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Nav","import React from 'react'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                News\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default News","import classes from './DialogsItem.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport React from 'react'\r\n\r\ntype Props = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n\r\n        <div className={classes.dialog}>\r\n\r\n            <div className={classes.pic}>\r\n                <img\r\n                    className={classes.img}\r\n                    src={'https://avatars.mds.yandex.net/get-zen_doc/1362956/pub_5bf63a4d77663700aaa65737_5bf63cbcd238aa00aac52f5b/scale_1200'}/>\r\n            </div>\r\n            <NavLink activeClassName={classes.activ} className={classes.link} to={`/dialogs/${props.id}`}> {props.name}\r\n                <div className={classes.lastmessage}>\r\n                    last message\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default DialogItem","import classes from './Message.module.css'\r\nimport React from 'react'\r\n\r\ntype Props = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.messageMY}>{props.message}</div>\r\n    )\r\n}\r\nexport default Message","import React from 'react'\r\nimport classes from './SendMessage.module.css'\r\nimport {useForm} from 'react-hook-form'\r\n\r\ntype PropsSendMessage = {\r\n    onSubmit: ({newMessage}: FormData, e: any) => void\r\n}\r\n\r\ntype FormData = {\r\n    newMessage: string\r\n}\r\nconst SendMessage: React.FC<PropsSendMessage> = ({onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<FormData>()\r\n\r\n    const required = 'You can\\'t send an empty message'\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={classes.text}>\r\n                <div>\r\n                    <textarea name='newMessage' placeholder={'New message'}\r\n                              ref={register({required, maxLength: {value: 30, message: 'Exceeded the limit'}})}/>\r\n                </div>\r\n            </div>\r\n            <div className={classes.btn}>\r\n                <button>Send message</button>\r\n                {errors.newMessage && <span className={classes.error}>{errors.newMessage.message}</span>}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype PropsSend = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nconst Send: React.FC<PropsSend> = (props) => {\r\n\r\n    const {reset} = useForm()\r\n\r\n    const onButtonClik = ({newMessage}: FormData, e: any) => {\r\n        e.target.reset()\r\n        props.addMessage(newMessage)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.addMessageWrapper}>\r\n            <SendMessage onSubmit={onButtonClik}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Send\r\n","import React from 'react'\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport SendMessage from './SendMessege/SendMessage'\r\nimport {InitialStateDialogs} from '../../redux/dialogsPage-reducer'\r\n\r\n\r\ntype Props = {\r\n    dialogsPage: InitialStateDialogs\r\n    addMessage: () => void\r\n}\r\n\r\nconst Dialogs = (props: Props) => {\r\n\r\n    const dialogsElement = props.dialogsPage.dialogsData\r\n        .map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n\r\n    const messagesElement = props.dialogsPage.messagesData\r\n        .map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs_wrapper}>\r\n\r\n            <div className={classes.dialogs}>\r\n                {\r\n                    dialogsElement\r\n                }\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                {\r\n                    messagesElement\r\n                }\r\n            </div>\r\n            <div className={classes.sendmessage}>\r\n                <SendMessage\r\n                    addMessage={props.addMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppState} from '../../redux/redux-store'\r\n\r\ntype MapStateProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppState): MapStateProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const withAuthRedirect = (Component: React.FC) => {\r\n    const RedirectComponent: React.FC<Props> = (props) => {\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...props} />\r\n    }\r\n    return connect<MapStateProps, null, null, AppState>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Dialogs from './Dialogs'\r\nimport {actionsDialogs, InitialStateDialogs} from '../../redux/dialogsPage-reducer'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../HOC/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppState} from '../../redux/redux-store'\r\n\r\nconst addMessage = actionsDialogs.addMessage\r\n\r\ntype MapStateProps = {\r\n    dialogsPage: InitialStateDialogs\r\n}\r\ntype MapDispatchProps = {\r\n    addMessage: (text: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {addMessage})\r\n)(Dialogs)","import React, {useEffect, useState} from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ThunkActionProfileType} from '../../../redux/profilePage-reducer'\r\n\r\ntype Props = {\r\n    status: string\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n    ifOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<Props> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusUser(status)\r\n    }\r\n\r\n    const onChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    if (!props.ifOwner)\r\n        return <span>{props.status || '---'}</span>\r\n\r\n    return (\r\n        <>\r\n\r\n            {!editMode &&\r\n            <div>\r\n                <span className={classes.status} onDoubleClick={onEditMode}>{props.status || '---'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onChangeStatus} autoFocus={true} onBlur={offEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport {UserProfileType} from '../../../types/types'\r\nimport {useForm} from 'react-hook-form'\r\n\r\ntype FormData = UserProfileType\r\n\r\ntype LoginFormOwnProps = {\r\n    profile: UserProfileType | null\r\n    onSubmit: (formData: FormData) => void\r\n}\r\n\r\nconst ProfileDataForm: React.FC<LoginFormOwnProps> = ({profile, onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<FormData>()\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div><b>Full name</b> <input defaultValue={profile?.fullName} name='fullName' type='text'\r\n                                         placeholder={'Full name'}\r\n                                         ref={register({maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                {errors.fullName && <p>{errors.fullName.message}</p>}\r\n            </div>\r\n            <div><b>About me</b> <input defaultValue={profile?.aboutMe} name='aboutMe' type='text'\r\n                                        placeholder={'Full name'}\r\n                                        ref={register({maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                {errors.aboutMe && <p>{errors.aboutMe.message}</p>}\r\n            </div>\r\n            <div><b>Looking for a job</b> <input name={'lookingForAJob'} type='checkbox'\r\n                                                 ref={register({\r\n                                                     maxLength: {value: 20, message: 'Exceeded the limit'}\r\n                                                 })}/>\r\n                {errors.lookingForAJob && <p>{errors.lookingForAJob.message}</p>}\r\n            </div>\r\n            <div><b>Looking for a job description</b><br/> <textarea defaultValue={profile?.lookingForAJobDescription}\r\n                                                                     name='lookingForAJobDescription'\r\n                                                                     placeholder={'Looking for a job description'}\r\n                                                                     ref={register({\r\n                                                                         maxLength: {\r\n                                                                             value: 20,\r\n                                                                             message: 'Exceeded the limit'\r\n                                                                         }\r\n                                                                     })}/>\r\n                {errors.lookingForAJobDescription && <p>{errors.lookingForAJobDescription.message}</p>}\r\n            </div>\r\n\r\n            <div><b>Contacts:</b> {profile && Object.keys(profile.contacts).map(key => (\r\n\r\n                <div key={key}>\r\n                    <b>{key}</b> <input name={'contacts.' + key} placeholder={key} type=\"text\"\r\n                                        ref={register({maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                </div>))} </div>\r\n\r\n            {/*{props.ifOwner && <button onClick={props.editModeOn}> edit</button>}*/}\r\n            <button onClick={() => {\r\n            }}> save\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ProfileDataForm\r\n\r\n","import React, {useState} from 'react'\r\nimport classes from './ProfileInfo.module.css'\r\nimport Preloader from '../../Common/Preloader/Preloader'\r\nimport withPhoto from './../../../assets/unnamed.jpg'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {UserProfileType} from '../../../types/types'\r\nimport {ThunkActionProfileType} from '../../../redux/profilePage-reducer'\r\n\r\ntype Props = {\r\n    saveProfile: (userProfile: UserProfileType) => void\r\n    userProfile: UserProfileType | null\r\n    savePhoto: (photo: File) => ThunkActionProfileType\r\n    status: string\r\n    ifOwner: boolean\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n}\r\n\r\ntype FormData = UserProfileType\r\n\r\nconst ProfileInfo: React.FC<Props> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData: FormData) => {\r\n        props.saveProfile(formData)\r\n            // @ts-ignore\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n\r\n    const changeMainPhoto = (e: any) => {\r\n        if (e.target.files.length) props.savePhoto(e.target.files[0])\r\n    }\r\n\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={classes.profileInfoWrapper}>\r\n            <div className={classes.picture}>\r\n                <img src={props.userProfile.photos.large || withPhoto} alt=\"ava\"/>\r\n            </div>\r\n            <div>{props.ifOwner && <input type={'file'} onClick={changeMainPhoto}/>}</div>\r\n            <div className={classes.info}>\r\n\r\n                <b>Status: </b><ProfileStatusWithHooks ifOwner={props.ifOwner} status={props.status}\r\n                                                       updateStatusUser={props.updateStatusUser}/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm\r\n                        onSubmit={onSubmit}\r\n                        profile={props.userProfile}/>\r\n                    : <ProfileData editModeOn={() => {\r\n                        setEditMode(true)\r\n                    }} profile={props.userProfile} ifOwner={props.ifOwner}/>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsProfileData = {\r\n    profile: UserProfileType\r\n    ifOwner: boolean\r\n    editModeOn: () => void\r\n\r\n}\r\n\r\nconst ProfileData: React.FC<PropsProfileData> = ({profile, ...props}) => {\r\n    return <div>\r\n        <div><b>Full name</b> {profile.fullName}</div>\r\n        <div><b>Looking for a job</b>{profile.lookingForAJob && profile.lookingForAJob ? ' Yes' : ' No'}</div>\r\n        <div><b>Looking for a job description</b><br/>{profile.lookingForAJobDescription}</div>\r\n        <div><b>Contacts:</b> {Object.keys(profile.contacts).map((key) => (\r\n            /*@ts-ignore*/\r\n            <Contact title={key} value={profile.contacts[key]} key={key}/>))} </div>\r\n        {props.ifOwner && <button onClick={props.editModeOn}> edit</button>}\r\n    </div>\r\n}\r\n\r\ntype PropsContact = {\r\n    title: string\r\n    value: string\r\n}\r\n\r\nconst Contact: React.FC<PropsContact> = ({title, value}) => {\r\n    return <div className={classes.contact}><b>{title}</b>{value}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport classes from './Post.module.css'\r\n\r\ntype Props = {\r\n    message: string\r\n    counterLike: number\r\n}\r\n\r\nconst Post: React.FC<Props> = React.memo((props) => {\r\n    return (\r\n        <div className={classes.post}>\r\n            <div className={classes.text}>\r\n                <div className={classes.message}>{props.message}</div>\r\n                <div className={classes.like}>like {props.counterLike}</div>\r\n            </div>\r\n            <img className={classes.img}\r\n                 src='https://avatars.mds.yandex.net/get-pdb/214908/5cf679dc-d4ef-43f0-88be-9b2a7fda87d5/s1200?webp=false'/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport classes from './Send.module.css'\r\nimport {useForm} from 'react-hook-form'\r\nimport styles from '../../../Login/Login.module.css'\r\n\r\ntype PropsSendPost = {\r\n    onSubmit: (data: LoginFormValues, e: any) => void\r\n}\r\n\r\nconst SendPost: React.FC<PropsSendPost> = ({onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<LoginFormValues>()\r\n\r\n    const required = 'This fields is required'\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={classes.text}>\r\n                <textarea name='messageText' placeholder={'New post'}\r\n                          ref={register({required, maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                {errors.messageText && <div className={styles.error}>{errors.messageText.message}</div>}\r\n            </div>\r\n            <div className={classes.btn}>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype PropsSend = {\r\n    addPost: (newPost: string) => void\r\n}\r\ntype LoginFormValues = {\r\n    messageText: string\r\n}\r\n\r\nconst Send: React.FC<PropsSend> = (props) => {\r\n\r\n    const {reset} = useForm()\r\n\r\n    const addNewPost = (data: LoginFormValues, e: any) => {\r\n        e.target.reset()\r\n        props.addPost(data.messageText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.addPostsWrapper}>\r\n\r\n            <SendPost onSubmit={addNewPost}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Send","import React from 'react'\r\nimport classes from './Wall.module.css'\r\nimport Post from './Post/Post'\r\nimport Send from './Send/Send'\r\nimport {PostDataType} from '../../../types/types'\r\n\r\ntype Props = {\r\n    postsData: Array<PostDataType>\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nconst Wall: React.FC<Props> = ({postsData, addPost}) => {\r\n\r\n    const postsElement = postsData\r\n        .map((p) => <Post counterLike={p.counterLike} message={p.message} key={p.id}/>)\r\n\r\n    return (\r\n        <div className={classes.posts}>\r\n            <Send\r\n                addPost={addPost}\r\n            />\r\n            <div>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Wall","import React from 'react'\r\nimport Wall from './Wall'\r\nimport {connect} from 'react-redux'\r\nimport {actionsProfile} from '../../../redux/profilePage-reducer'\r\nimport {AppState} from '../../../redux/redux-store'\r\nimport {PostDataType} from '../../../types/types'\r\n\r\nconst addPost = actionsProfile.addPost\r\n\r\ntype MapStateToProps = {\r\n    postsData: Array<PostDataType>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => {\r\n    return {\r\n        postsData: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, null, AppState>(mapStateToProps, {addPost})\r\n(Wall)","import React from 'react'\r\nimport classes from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport WallContainer from './wall/WallContainer'\r\nimport {UserProfileType} from '../../types/types'\r\nimport {ThunkActionProfileType} from '../../redux/profilePage-reducer'\r\nimport Preloader from '../Common/Preloader/Preloader'\r\n\r\n\r\ntype Props = {\r\n    saveProfile: (userProfile: UserProfileType) => ThunkActionProfileType\r\n    ifOwner: boolean\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n    savePhoto: (photo: File) => ThunkActionProfileType\r\n}\r\n\r\nconst Profile: React.FC<Props> = (props) => {\r\n\r\n\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.profileWrapper}>\r\n            <ProfileInfo saveProfile={props.saveProfile}\r\n                         ifOwner={props.ifOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         userProfile={props.userProfile}\r\n                         status={props.status}\r\n                         updateStatusUser={props.updateStatusUser}\r\n            />\r\n            {/*@ts-ignore*/}\r\n            <WallContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {\r\n    getStatusUser,\r\n    getUser,\r\n    savePhoto,\r\n    saveProfile,\r\n    ThunkActionProfileType,\r\n    updateStatusUser\r\n} from '../../redux/profilePage-reducer'\r\nimport {compose} from 'redux'\r\nimport {AppState} from '../../redux/redux-store'\r\nimport {UserProfileType} from '../../types/types'\r\nimport {InitialStateAuth} from '../../redux/auth-reducer'\r\n\r\ntype AllProps = MapDispatchProps & MapStateProps & RouteComponentProps<any>\r\n\r\nclass ProfileContainer extends React.Component<AllProps> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUser(userId)\r\n        this.props.getStatusUser(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: AllProps) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     ifOwner={!this.props.match.params.userId}\r\n                     updateStatusUser={this.props.updateStatusUser}\r\n                     userProfile={this.props.userProfile}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n                     status={this.props.status}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateProps = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    userId: number | null\r\n    isAuth: boolean\r\n    auth: InitialStateAuth\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    getUser: (userId: number) => ThunkActionProfileType\r\n    getStatusUser: (userId: number) => ThunkActionProfileType\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n    savePhoto: (photo: File) => ThunkActionProfileType\r\n    saveProfile: (userProfile: UserProfileType) => ThunkActionProfileType\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => ({\r\n    userProfile: state.profilePage.userProfile,\r\n    status: state.profilePage.userStatus,\r\n    userId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    auth: state.auth\r\n})\r\n\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {\r\n        getUser,\r\n        getStatusUser,\r\n        updateStatusUser,\r\n        savePhoto,\r\n        saveProfile\r\n    })\r\n)(ProfileContainer)\r\n","import React from 'react'\r\nimport classes from './Header.module.css'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {InitialStateAuth} from '../../redux/auth-reducer'\r\n\r\ntype Props = {\r\n    auth: InitialStateAuth\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<Props> = (props) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img className={classes.img}\r\n                 src={'https://cdn0.iconfinder.com/data/icons/glyphie-1/40/drum_instrument_music_rock-512.png'}/>\r\n            <div className={classes.tect}>вне такта</div>\r\n            <div className={classes.login}>\r\n                {props.auth.isAuth ?\r\n\r\n                    <div>{props.auth.login}\r\n                        <button onClick={props.logout}>Log uot</button>\r\n                    </div>\r\n                    : <NavLink to={'/login'}>login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Header from './Header'\r\nimport {connect} from 'react-redux'\r\nimport {InitialStateAuth, logoutUser} from '../../redux/auth-reducer'\r\nimport {compose} from 'redux'\r\nimport {AppState} from '../../redux/redux-store'\r\n\r\ntype MapStateProps = {\r\n    auth: InitialStateAuth\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    logoutUser: () => void\r\n}\r\n\r\ntype Props = MapStateProps & MapDispatchProps\r\n\r\nclass HeaderContainer extends React.Component<Props> {\r\n\r\n    render() {\r\n        return <Header logout={this.props.logoutUser} {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {logoutUser})\r\n)(HeaderContainer)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {loginUser} from '../../redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppState} from '../../redux/redux-store'\r\nimport {useForm} from 'react-hook-form'\r\nimport styles from './Login.module.css'\r\n\r\ntype Props = {\r\n    captchaUrl: string | null\r\n    onSubmit: ({email, password, rememberMe, captcha}: LoginFormValues) => void\r\n}\r\n\r\nconst LoginForm: React.FC<Props> = ({captchaUrl, onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<LoginFormValues>()\r\n\r\n    const required = 'This fields is required'\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={styles.wrapperInput}>\r\n                <input name='email' type='email' placeholder={'email'}\r\n                       ref={register({required})}/>\r\n                {errors.email && <div className={styles.error}>{errors.email.message}</div>}\r\n            </div>\r\n            <div className={styles.wrapperInput}>\r\n                <input name='password' type='password' placeholder={'password'} ref={register({required})}/>\r\n                {errors.password && <div className={styles.error}>{errors.password.message}</div>}\r\n            </div>\r\n            <div>\r\n                <label>\r\n                    <input name='rememberMe' type='checkbox' ref={register}/> Remember me\r\n                </label>\r\n            </div>\r\n            {captchaUrl && <> <img src={captchaUrl}/><br/> <input name={'captcha'}\r\n                                                                  placeholder={'captcha'} ref={register}/></>}\r\n            <div>\r\n                <button>login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype MapStateProps = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchProps = {\r\n    loginUser: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginFormValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<MapStateProps & MapDispatchProps> = (props) => {\r\n\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValues) => {\r\n        props.loginUser(email, password, rememberMe, captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.outerWrapperLogin}>\r\n            <div className={styles.innerWrapperLogin}>\r\n                <div><h3>Login</h3></div>\r\n                <div>\r\n                    <LoginForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {loginUser})(Login)","import React, {Suspense} from 'react'\r\nimport './App.css'\r\nimport NavBar from './components/Navbar/NavBar'\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport News from './components/News/News'\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\r\nimport ProfileContainer from './components/profile/ProfileContainer'\r\nimport HeaderContainer from './components/Header/HeaderContainer'\r\nimport Login from './components/Login/Login'\r\nimport {connect} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {initializeApp} from './redux/App-reducer'\r\nimport Preloader from './components/Common/Preloader/Preloader'\r\n\r\nconst FriendsContainer = React.lazy(() => import('./components/Friends/FriendsContainer'))\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Preloader/>\r\n        return (\r\n            <div className='app-wrapper'>\r\n                <HeaderContainer/>\r\n                <NavBar/>\r\n                <div className='app-wrapper-content'>\r\n                    <Suspense fallback={<div>Загрузка...</div>}>\r\n                        <Switch>\r\n                            <Route path='/Profile/:userId?'\r\n                                   render={() => <ProfileContainer/>}/>\r\n\r\n                            <Route path='/Dialogs'\r\n                                   render={() => <DialogsContainer/>}/>\r\n\r\n                            <Route path='/News' render={() => <News/>}/>\r\n\r\n                            <Route path='/Friends' render={() => <FriendsContainer/>}/>\r\n                            <Route path='/Login' render={() => <Login/>}/>\r\n                            <Redirect form={'/'} to={'/profile'}/>\r\n                        </Switch>\r\n                    </Suspense>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter\r\n)(App)\r\n","import React from 'react'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport store from './redux/redux-store'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux'\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}