{"version":3,"sources":["API/api.tsx","components/profile/ProfileInfo/ProfileInfo.module.scss","components/Login/Login.module.scss","components/Header/Header.module.scss","components/Common/Button/Button.tsx","components/Navbar/NavBar.module.scss","components/profile/wall/Post/Post.module.scss","components/Dialogs/DialogsItem/DialogsItem.module.scss","components/Common/Preloader/Preloader.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/SendMessege/SendMessage.module.css","components/profile/wall/Send/Send.module.scss","components/profile/Profile.module.scss","components/Common/Preloader/Preloader.module.css","assets/unnamed.jpg","Utils/helpers/object-helper.js","redux/friendsPage-reducer.ts","components/News/News.module.css","assets/dialog.jpg","components/Dialogs/Message/Message.module.scss","components/Common/Textarea/Textarea.module.scss","components/Common/Button/Button.module.scss","assets/myGirlfriend.jpg","assets/logo.png","serviceWorker.js","redux/profilePage-reducer.ts","redux/sidebar-reducer.tsx","redux/dialogsPage-reducer.ts","redux/auth-reducer.ts","redux/App-reducer.ts","redux/redux-store.tsx","components/Navbar/NavBar.tsx","components/HOC/WithAuthRedirect.tsx","components/News/News.tsx","components/Dialogs/DialogsItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Common/Textarea/Textarea.tsx","components/Dialogs/SendMessege/SendForm.tsx","components/Dialogs/SendMessege/SendMessage.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/ProfileDataForm.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/wall/Post/Post.tsx","components/profile/wall/Send/Send.tsx","components/profile/wall/Wall.tsx","components/profile/wall/WallContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.js","index.js"],"names":["ResultCodes","ResultCodeForCaptcha","instance","axios","create","baseURL","withCredentials","headers","friendsAPI","getUsers","pageSize","pageNum","get","then","response","data","unfollow","userId","delete","follow","post","profileAPI","getProfile","getStatus","updateStatus","status","put","savePhoto","photo","formData","FormData","append","saveProfile","authAPI","setProfileData","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptcha","module","exports","Button","forDisabled","name","handleClick","disabled","className","styles","button","onClick","Preloader","props","wrapperPreloader","ldsSpinner","updateObjectInArray","items","itemProp","requiredProp","newObj","map","item","initialState","users","totalUsers","currentPage","isFetching","followingInProgress","actionsFriends","id","type","dispatch","a","totalCount","_followUnfollowFlow","apiMethod","actionCreator","resultCode","success","bind","friendsPageReducer","state","action","followed","filter","Boolean","window","location","hostname","match","postsData","message","counterLike","userProfile","userStatus","actionsProfile","newPost","user","photos","getUser","getUserData","profilePageReducer","sideBarReducer","messagesData","dialogsData","dialogsPageReducer","textMess","isAuth","captchaUrl","actionsAuth","payload","setUserData","userData","getCaptchaData","url","authReducer","initialized","actionsApp","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sideBar","friendsPage","auth","app","store","createStore","compose","applyMiddleware","thunk","Nav","nav","nav__item","to","activeClassName","active","mapStateToProps","withAuthRedirect","Component","connect","news","DialogItem","dialog","dialog__avatar","img","src","alt","dialog__content","lastMessage","Message","classes","Textarea","register","placeholder","textarea","ref","SendForm","onSubmit","useForm","handleSubmit","errors","messageForm","text","required","maxLength","value","btnWrapper","newMessage","error","SendMessage","e","target","reset","addMessage","Dialogs","dialogsElement","d","key","messagesElement","m","dialogs","dialogs__items","dialogs__messagesBox","messages","sendMessages","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","ifOwner","onDoubleClick","onChange","currentTarget","autoFocus","onBlur","updateStatusUser","ProfileDataForm","profile","defaultValue","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","ProfileData","profileData","title","profileData__btn","editModeOn","Contact","contact","ProfileInfo","profileInfo","profileInfo__picture","profileInfo__img","large","withPhoto","profileInfo__inputFile","files","length","cn","profileInfo__description","description","description__status","description__about","Post","React","memo","post__img","myGirlfriend","post__content","content","content__message","content__like","SendPost","postForm","postForm__text","postForm__btn","messageText","Send","addPost","Wall","postsElement","p","posts","posts__postForm","posts__element","Profile","profile__info","profile__wall","WallContainer","ProfileContainer","this","params","history","push","getStatusUser","refreshProfile","prevProps","withRouter","getStatusUserData","savePhotoData","getState","Header","header","headerWrapper","header__logo","logo","header__title","header__login","login__of","of","of__name","of__button","login__on","HeaderContainer","logoutUser","LoginForm","wrapperInput","inputLogin","labelCheck","htmlFor","checkbox","fakeCheck","textLabel","loginUser","loginUserData","login__title","login__content","FriendsContainer","lazy","App","initializeApp","NavBar","fallback","path","render","DialogsContainer","form","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.987f5608.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {PhotosType, UserProfileType, UserType} from '../types/types'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {'API-KEY': '02b9c283-65ab-4aa6-9c25-cf1f7a717d1b'}\r\n})\r\n\r\nexport enum ResultCodes {\r\n    success = 0,\r\n    error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptcha {\r\n    captcha = 10\r\n}\r\n\r\ninterface GetUsers {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: null | string\r\n}\r\n\r\ninterface IResponse {\r\n    resultCode: ResultCodes\r\n    messages: Array<string | void>\r\n    data: Object\r\n}\r\n\r\nexport const friendsAPI = {\r\n    getUsers(pageSize: number, pageNum: number) {\r\n        return instance.get<GetUsers>(`users?count=${pageSize}&page=${pageNum}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<IResponse>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<IResponse>(`follow/${userId}`).then(response => response.data)\r\n    }\r\n}\r\n\r\ninterface ISavePhoto extends IResponse {\r\n    data: { photos: PhotosType }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<UserProfileType>('profile/' + userId).then(response => response.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>('profile/status/' + userId).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<IResponse>('profile/status/', {status}).then(response => response.data)\r\n    },\r\n    savePhoto(photo: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', photo)\r\n        return instance.put<ISavePhoto>('/profile/photo', formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    saveProfile(formData: any) {\r\n        return instance.put<IResponse>('profile', formData).then(response => response.data)\r\n    }\r\n\r\n}\r\n\r\ninterface IMe extends IResponse {\r\n    data: {\r\n        id: number\r\n        email: string\r\n        login: string\r\n    }\r\n}\r\n\r\ninterface ILogin {\r\n    messages: Array<string | void>\r\n    data: {\r\n        userId: number\r\n    }\r\n    resultCode: ResultCodeForCaptcha | ResultCodes\r\n}\r\n\r\nexport const authAPI = {\r\n    setProfileData() {\r\n        return instance.get<IMe>(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<ILogin>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<IResponse>(`auth/login`).then(response => response.data)\r\n    }\r\n}\r\n\r\ninterface ICaptchs {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptcha() {\r\n        return instance.get<ICaptchs>(`security/get-captcha-url`).then(response => response.data)\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo__picture\":\"ProfileInfo_profileInfo__picture__1_mKU\",\"profileInfo__img\":\"ProfileInfo_profileInfo__img__2w7Nl\",\"description__status\":\"ProfileInfo_description__status__2DgI2\",\"description__about\":\"ProfileInfo_description__about__3N3Ib\",\"profileData__btn\":\"ProfileInfo_profileData__btn__peONS\",\"status\":\"ProfileInfo_status__jRZtB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__z5dSt\",\"login__title\":\"Login_login__title__37fz0\",\"wrapperInput\":\"Login_wrapperInput__3zR2c\",\"error\":\"Login_error__25fYI\",\"inputLogin\":\"Login_inputLogin__2tejL\",\"checkbox\":\"Login_checkbox__33JqO\",\"fakeCheck\":\"Login_fakeCheck__1olMs\",\"textLabel\":\"Login_textLabel__Pg8JI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Jhy9\",\"headerWrapper\":\"Header_headerWrapper__26sZt\",\"header__logo\":\"Header_header__logo__35Eqq\",\"header__title\":\"Header_header__title__2roqs\",\"header__login\":\"Header_header__login__1SnHS\",\"img\":\"Header_img__3eI3V\",\"login__on\":\"Header_login__on__RYGkY\",\"of__name\":\"Header_of__name__3ZOs3\",\"of__button\":\"Header_of__button__W9WN2\"};","import React from 'react'\r\n\r\nimport styles from './Button.module.scss'\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    handleClick?: () => void\r\n    forDisabled?: boolean\r\n}\r\n\r\nconst Button:React.FC<ButtonType> = ({forDisabled ,name, handleClick}) => {\r\n\r\n    return (\r\n        <button disabled={forDisabled} className={styles.button} onClick={handleClick}>{name}</button>\r\n    )\r\n}\r\nexport default Button","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__1o4Ob\",\"nav__item\":\"NavBar_nav__item__37JS9\",\"active\":\"NavBar_active__BzOaj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__96kwD\",\"post__content\":\"Post_post__content__2yLGG\",\"post__img\":\"Post_post__img__2TxTe\",\"content\":\"Post_content__2p24w\",\"content__like\":\"Post_content__like__2N-Hu\",\"img\":\"Post_img__3avUk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogsItem_dialog__2yZCg\",\"dialog__avatar\":\"DialogsItem_dialog__avatar__qO3Rr\",\"img\":\"DialogsItem_img__14iD6\",\"dialog__content\":\"DialogsItem_dialog__content__1qNg2\",\"lastMessage\":\"DialogsItem_lastMessage__16-pJ\"};","import React from 'react'\r\nimport styles from './Preloader.module.css'\r\n\r\ntype props = {}\r\nconst Preloader = (props: props) => {\r\n\r\n    return (\r\n        <div className={styles.wrapperPreloader}>\r\n            <div className={styles.ldsSpinner}>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Preloader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3Q495\",\"dialogs__items\":\"Dialogs_dialogs__items__2Ch0E\",\"dialogs__messagesBox\":\"Dialogs_dialogs__messagesBox__14xFC\",\"messages\":\"Dialogs_messages__3A4KQ\",\"sendMessages\":\"Dialogs_sendMessages__2-GC1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageForm\":\"SendMessage_messageForm__37yRT\",\"btnWrapper\":\"SendMessage_btnWrapper__2swWI\",\"error\":\"SendMessage_error__1QN0q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postForm\":\"Send_postForm__LCz3U\",\"postForm__text\":\"Send_postForm__text__2Lwtb\",\"postForm__btn\":\"Send_postForm__btn__1o_AQ\",\"error\":\"Send_error__2QIsz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__3V0Hs\",\"profile__info\":\"Profile_profile__info__E6YGN\",\"profile__wall\":\"Profile_profile__wall__3h3Kl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperPreloader\":\"Preloader_wrapperPreloader__3jrse\",\"ldsSpinner\":\"Preloader_ldsSpinner__SlKaU\"};","module.exports = __webpack_public_path__ + \"static/media/unnamed.11fdd540.jpg\";","export const updateObjectInArray = (items, itemProp, requiredProp, newObj) => {\r\n    return items.map(item => {\r\n        if (item[itemProp] === requiredProp) {\r\n            return {...item, ...newObj}\r\n        }\r\n        return item\r\n    })\r\n}\r\n","import {friendsAPI, ResultCodes} from '../API/api'\r\nimport {updateObjectInArray} from '../Utils/helpers/object-helper'\r\nimport {UserType} from '../types/types'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {ThunkAction} from 'redux-thunk'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    totalUsers: 1,\r\n    pageSize: 10,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst friendsPageReducer = (state = initialState, action: Actions): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'friends/FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, 'id', action.id, {followed: true})\r\n            }\r\n        }\r\n        case 'friends/UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, 'id', action.id, {followed: false})\r\n            }\r\n        }\r\n        case 'friends/SET_USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        }\r\n        case 'friends/SET_CURRENT_PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            }\r\n        }\r\n        case 'friends/SET_TOTAL_USERS_COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsers: action.totalUsers\r\n            }\r\n        }\r\n        case 'friends/TOGGLE_IS_FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            }\r\n        }\r\n        case 'friends/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(userId => userId !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsFriends>\r\n\r\nexport const actionsFriends = {\r\n    followAccess: (id: number) => ({type: 'friends/FOLLOW', id} as const),\r\n    unfollowAccess: (id: number) => ({type: 'friends/UNFOLLOW', id} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'friends/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'friends/SET_CURRENT_PAGE', currentPage} as const),\r\n    setTotalUsersCount: (totalUsers: number) => ({type: 'friends/SET_TOTAL_USERS_COUNT', totalUsers} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'friends/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingInProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'friends/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\ntype DispatchType = Dispatch<Actions>\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport const getUsers = (pageSize: number = 10, pageNum: number = 1): ThunkActionType => {\r\n\r\n    return async (dispatch: DispatchType) => {\r\n        dispatch(actionsFriends.toggleIsFetching(true))\r\n        dispatch(actionsFriends.setCurrentPage(pageNum))\r\n\r\n        const data = await friendsAPI.getUsers(pageSize, pageNum)\r\n        dispatch(actionsFriends.toggleIsFetching(false))\r\n        dispatch(actionsFriends.setUsers(data.items))\r\n        dispatch(actionsFriends.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: DispatchType,\r\n                                   userId: number,\r\n                                   apiMethod: any,\r\n                                   actionCreator: (userId: number) => Actions) => {\r\n\r\n    dispatch(actionsFriends.toggleFollowingInProgress(true, userId))\r\n\r\n    const followUnfollowFlowData = await apiMethod(userId)\r\n\r\n    if (followUnfollowFlowData.resultCode === ResultCodes.success) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actionsFriends.toggleFollowingInProgress(false, userId))\r\n}\r\nexport const unfollow = (userId: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, friendsAPI.unfollow.bind(friendsAPI), actionsFriends.unfollowAccess)\r\n    }\r\n}\r\nexport const follow = (userId: number): ThunkActionType => {\r\n    return async (dispatch) => {\r\n        _followUnfollowFlow(dispatch, userId, friendsAPI.follow.bind(friendsAPI), actionsFriends.followAccess)\r\n    }\r\n}\r\n\r\nexport default friendsPageReducer\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"news\":\"News_news__3RXkG\"};","module.exports = __webpack_public_path__ + \"static/media/dialog.df1438c8.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__2z8sn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textarea\":\"Textarea_textarea__3UDSb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1QDje\"};","module.exports = __webpack_public_path__ + \"static/media/myGirlfriend.e99e760d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.54f51bb4.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import {profileAPI, ResultCodes} from '../API/api'\r\nimport {PhotosType, PostDataType, UserProfileType} from '../types/types'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, message: 'i dont know', counterLike: 2},\r\n        {id: 2, message: 'what?', counterLike: 1}\r\n    ] as Array<PostDataType>,\r\n    userProfile: null as null | UserProfileType,\r\n    userStatus: ''\r\n}\r\n\r\nexport type InitialStateProfileType = typeof initialState\r\n\r\nconst profilePageReducer = (state = initialState, action: Actions): InitialStateProfileType => {\r\n    switch (action.type) {\r\n        case 'profile/ADD-POST': {\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, {\r\n                    id: 5, message: action.newPost,\r\n                    counterLike: 0\r\n                }]\r\n            }\r\n        }\r\n        case 'profile/SET_USER_PROFILE': {\r\n            return {\r\n                ...state,\r\n                userProfile: action.user\r\n            }\r\n        }\r\n        case 'profile/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                userStatus: action.status\r\n            }\r\n        }\r\n        case 'profile/SET_PHOTO': {\r\n            return {\r\n                ...state,\r\n                userProfile: {...state.userProfile, photos: action.photos} as UserProfileType\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ThunkActionProfileType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport type Actions = ActionsTypes<typeof actionsProfile>\r\n\r\nexport const actionsProfile = {\r\n    addPost: (newPost: string) => ({type: 'profile/ADD-POST', newPost} as const),\r\n    setUserProfile: (user: UserProfileType) => ({type: 'profile/SET_USER_PROFILE', user} as const),\r\n    setUserStatus: (status: string) => ({type: 'profile/SET_STATUS', status} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'profile/SET_PHOTO', photos} as const)\r\n}\r\n\r\nexport const getUser = (userId: number): ThunkActionProfileType => {\r\n    return async (dispatch) => {\r\n        const getUserData = await profileAPI.getProfile(userId)\r\n        dispatch(actionsProfile.setUserProfile(getUserData))\r\n    }\r\n}\r\n\r\nexport const getStatusUser = (userId: number): ThunkActionProfileType => {\r\n    return async (dispatch) => {\r\n        const getStatusUserData = await profileAPI.getStatus(userId)\r\n        dispatch(actionsProfile.setUserStatus(getStatusUserData))\r\n    }\r\n}\r\n\r\nexport const updateStatusUser = (status: string): ThunkActionProfileType => {\r\n    return async (dispatch) => {\r\n        const updateStatusUserData = await profileAPI.updateStatus(status)\r\n        if (updateStatusUserData.resultCode === ResultCodes.success) {\r\n            dispatch(actionsProfile.setUserStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (photo: File): ThunkActionProfileType => async (dispatch) => {\r\n    const savePhotoData = await profileAPI.savePhoto(photo)\r\n    if (savePhotoData.resultCode === ResultCodes.success) {\r\n        dispatch(actionsProfile.savePhotoSuccess(savePhotoData.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (userProfile: UserProfileType): ThunkActionProfileType => async (dispatch, getState) => {\r\n    const id = getState().auth.id\r\n    const saveProfileData = await profileAPI.saveProfile(userProfile)\r\n    if (saveProfileData.resultCode === ResultCodes.success) {\r\n        if (id) dispatch(getUser(id))\r\n    }\r\n}\r\n\r\nexport default profilePageReducer\r\n","let initialState = {}\r\n\r\nconst sideBarReducer = (state = initialState, action: {}) => {\r\n\r\n    return state\r\n}\r\n\r\nexport default sideBarReducer\r\n","import {ActionsTypes} from './redux-store'\r\n\r\ntype MessagesDataType = {\r\n    id: number\r\n    message: string\r\n}\r\ntype DialogsDataType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet initialState = {\r\n    messagesData: [\r\n        {id: 1, message: 'AVADA KEDAVRA'},\r\n        {id: 2, message: 'EXPILARMUS'},\r\n        {id: 3, message: 'FLEPENDO'},\r\n        {id: 4, message: 'VINGARDIUM LEVIOSSA'},\r\n        {id: 5, message: 'bukla'}\r\n    ] as Array<MessagesDataType>,\r\n\r\n    dialogsData: [\r\n        {id: 1, name: 'Albus'},\r\n        {id: 2, name: 'Harry'},\r\n        {id: 3, name: 'Germiona'}\r\n    ] as Array<DialogsDataType>\r\n}\r\n\r\nexport type InitialStateDialogs = typeof initialState;\r\n\r\nconst dialogsPageReducer = (state = initialState, action: Actions): InitialStateDialogs => {\r\n    switch (action.type) {\r\n        case 'dialogs/ADD-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                messagesData: [...state.messagesData, {id: 6, message: action.textMess}]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsDialogs>\r\n\r\nexport const actionsDialogs = {\r\n    addMessage: (textMess: string) => ({type: 'dialogs/ADD-MESSAGE', textMess} as const)\r\n}\r\n\r\nexport default dialogsPageReducer\r\n","import {authAPI, ResultCodeForCaptcha, ResultCodes, securityAPI} from '../API/api'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\n\r\nexport type InitialStateAuth = {\r\n    id: null | number\r\n    login: null | string\r\n    email: null | string\r\n    isAuth: boolean\r\n    captchaUrl: null | string\r\n}\r\n\r\nlet initialState: InitialStateAuth = {\r\n    id: null,\r\n    login: null,\r\n    email: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: Actions): InitialStateAuth => {\r\n    switch (action.type) {\r\n        case 'auth/SET_USER_DATE':\r\n        case 'auth/SET_CAPTCHA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsAuth>\r\n\r\nexport const actionsAuth = {\r\n    setCaptchaSuccess: (captchaUrl: string) => ({\r\n        type: 'auth/SET_CAPTCHA',\r\n        payload: {captchaUrl}\r\n    } as const),\r\n    setUserDataAccess: (id: number | null, login: string | null, email: string | null, isAuth: boolean) => ({\r\n        type: 'auth/SET_USER_DATE',\r\n        payload: {id, login, email, isAuth}\r\n    } as const)\r\n}\r\n\r\nexport type ThunkActionAuthType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport const setUserData = (): ThunkActionAuthType => async (dispatch) => {\r\n    const userData = await authAPI.setProfileData()\r\n    if (userData.resultCode === ResultCodes.success) {\r\n        const {id, login, email} = userData.data\r\n        dispatch(actionsAuth.setUserDataAccess(id, login, email, true))\r\n    }\r\n}\r\n\r\nexport const loginUser = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkActionAuthType => async (dispatch) => {\r\n    const loginUserData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginUserData.resultCode === ResultCodes.success) {\r\n        dispatch(setUserData())\r\n    } else if (loginUserData.resultCode === ResultCodeForCaptcha.captcha) {\r\n        dispatch(getCaptcha())\r\n    }\r\n}\r\n\r\nexport const logoutUser = (): ThunkActionAuthType => async (dispatch) => {\r\n    const logoutUserData = await authAPI.logout()\r\n    if (logoutUserData.resultCode === ResultCodes.success) {\r\n        dispatch(actionsAuth.setUserDataAccess(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptcha = (): ThunkActionAuthType => async (dispatch) => {\r\n    const getCaptchaData = await securityAPI.getCaptcha()\r\n    dispatch(actionsAuth.setCaptchaSuccess(getCaptchaData.url))\r\n}\r\n\r\nexport default authReducer\r\n","import {setUserData} from './auth-reducer'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {ActionsTypes, AppState} from './redux-store'\r\n\r\nlet initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst appReducer = (state = initialState, action: Actions): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'app/INITIALIZED_SUCCESS': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype Actions = ActionsTypes<typeof actionsApp>\r\n\r\nexport const actionsApp = {\r\n    setInitializedSuccess: () => ({type: 'app/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\ntype ThunkActionType = ThunkAction<Promise<void>, AppState, unknown, Actions>\r\n\r\nexport const initializeApp = (): ThunkActionType => async (dispatch) => {\r\n    await dispatch(setUserData())\r\n    dispatch(actionsApp.setInitializedSuccess())\r\n}\r\n\r\nexport default appReducer\r\n","import {applyMiddleware, combineReducers, compose, createStore} from 'redux'\r\nimport profilePageReducer from './profilePage-reducer'\r\nimport sideBarReducer from './sidebar-reducer'\r\nimport dialogsPageReducer from './dialogsPage-reducer'\r\nimport friendsPageReducer from './friendsPage-reducer'\r\nimport authReducer from './auth-reducer'\r\nimport thunk from 'redux-thunk'\r\nimport appReducer from './App-reducer'\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profilePageReducer,\r\n    dialogsPage: dialogsPageReducer,\r\n    sideBar: sideBarReducer,\r\n    friendsPage: friendsPageReducer,\r\n    auth: authReducer,\r\n    app: appReducer\r\n})\r\n\r\ntype RootReducer = typeof rootReducer\r\n\r\nexport type AppState = ReturnType<RootReducer>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type ActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nconst store = createStore(rootReducer, compose(\r\n    applyMiddleware(\r\n        thunk)\r\n// @ts-ignore\r\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n))\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react'\r\nimport styles from './NavBar.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className={styles.nav}>\r\n            <div className={styles.nav__item}>\r\n                <NavLink to='/profile' activeClassName={styles.active}>Profile</NavLink>\r\n            </div>\r\n\r\n            <div className={styles.nav__item}>\r\n                <NavLink to='/news' activeClassName={styles.active}>News</NavLink>\r\n            </div>\r\n\r\n            <div className={styles.nav__item}>\r\n                <NavLink to='/dialogs' activeClassName={styles.active}>Dialogs</NavLink>\r\n            </div>\r\n\r\n            <div className={styles.nav__item}>\r\n                <NavLink to='/friends' activeClassName={styles.active}>Friends</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default Nav","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppState} from '../../redux/redux-store'\r\n\r\ntype MapStateProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: AppState): MapStateProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype Props = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport const withAuthRedirect = (Component: React.FC) => {\r\n    const RedirectComponent: React.FC<Props> = (props) => {\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...props} />\r\n    }\r\n    return connect<MapStateProps, null, null, AppState>(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport styles from './News.module.css'\r\nimport {withAuthRedirect} from '../HOC/WithAuthRedirect'\r\n\r\nconst News = () => {\r\n    return (\r\n        <div className={styles.news}>\r\n                News\r\n        </div>\r\n    )\r\n}\r\nexport default withAuthRedirect(News)","import styles from './DialogsItem.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\nimport React from 'react'\r\nimport dialog from './../../../assets/dialog.jpg'\r\n\r\ntype Props = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <div className={styles.dialog}>\r\n            <div className={styles.dialog__avatar}>\r\n                <img className={styles.img} src={dialog} alt={'avatar'}/>\r\n            </div>\r\n            <div className={styles.dialog__content}>\r\n                <NavLink activeClassName={styles.active} to={`/dialogs/${props.id}`}>\r\n                    {props.name}\r\n                </NavLink>\r\n                <div className={styles.lastMessage}>\r\n                    Last message\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem","import classes from './Message.module.scss'\r\nimport React from 'react'\r\n\r\ntype Props = {\r\n    message: string\r\n}\r\n\r\nconst Message: React.FC<Props> = (props) => {\r\n\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\nexport default Message","import React from 'react'\r\nimport styles from './Textarea.module.scss'\r\n\r\ntype TextareaType = {\r\n    name: string\r\n    placeholder: string\r\n    register: any\r\n}\r\n\r\nconst Textarea:React.FC<TextareaType> = ({name, register, placeholder}) => {\r\n\r\n    return <textarea className={styles.textarea} name={name} placeholder={placeholder} ref={register} />\r\n}\r\nexport default Textarea","import React from 'react'\r\nimport {useForm} from 'react-hook-form'\r\nimport styles from './SendMessage.module.css'\r\nimport Textarea from '../../Common/Textarea/Textarea'\r\nimport Button from '../../Common/Button/Button'\r\n\r\ntype PropsSendMessage = {\r\n    onSubmit: ({newMessage}: MessageDataForm, e: any) => void\r\n}\r\n\r\nexport type MessageDataForm = {\r\n    newMessage: string\r\n}\r\nconst SendForm: React.FC<PropsSendMessage> = ({onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<MessageDataForm>()\r\n\r\n    const required = 'You can\\'t send an empty message'\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={styles.messageForm}>\r\n                <div className={styles.text}>\r\n                        <Textarea name={'newMessage'} placeholder={'New message'} register={register({\r\n                            required,\r\n                            maxLength: {value: 30, message: 'Exceeded the limit'}\r\n                        })}/>\r\n                </div>\r\n                <div className={styles.btnWrapper}>\r\n                    {errors.newMessage && <span className={styles.error}>{errors.newMessage.message}</span>}\r\n                    <Button name={'Send message'}/>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nexport default SendForm","import React from 'react'\r\nimport SendForm, {MessageDataForm} from './SendForm'\r\n\r\n\r\ntype PropsSend = {\r\n    addMessage: (newMessage: string) => void\r\n}\r\n\r\nconst SendMessage: React.FC<PropsSend> = (props) => {\r\n\r\n    const onButtonClick = ({newMessage}: MessageDataForm, e: any) => {\r\n        e.target.reset()\r\n        props.addMessage(newMessage)\r\n    }\r\n\r\n    return <SendForm onSubmit={onButtonClick}/>\r\n\r\n}\r\nexport default SendMessage\r\n","import React from 'react'\r\nimport styles from './Dialogs.module.css'\r\nimport DialogItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport SendMessage from './SendMessege/SendMessage'\r\nimport {InitialStateDialogs} from '../../redux/dialogsPage-reducer'\r\n\r\ntype Props = {\r\n    dialogsPage: InitialStateDialogs\r\n    addMessage: () => void\r\n}\r\n\r\nconst Dialogs = (props: Props) => {\r\n\r\n    const dialogsElement = props.dialogsPage.dialogsData\r\n        .map(d => <DialogItem key={d.id} name={d.name} id={d.id}/>)\r\n\r\n    const messagesElement = props.dialogsPage.messagesData\r\n        .map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogs__items}>\r\n                {\r\n                    dialogsElement\r\n                }\r\n            </div>\r\n            <div className={styles.dialogs__messagesBox}>\r\n                <div className={styles.messages}>\r\n                    {\r\n                        messagesElement\r\n                    }\r\n                </div>\r\n                <div className={styles.sendMessages}>\r\n                    <SendMessage\r\n                        addMessage={props.addMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs","import React from 'react'\r\nimport Dialogs from './Dialogs'\r\nimport {actionsDialogs, InitialStateDialogs} from '../../redux/dialogsPage-reducer'\r\nimport {connect} from 'react-redux'\r\nimport {withAuthRedirect} from '../HOC/WithAuthRedirect'\r\nimport {compose} from 'redux'\r\nimport {AppState} from '../../redux/redux-store'\r\n\r\nconst addMessage = actionsDialogs.addMessage\r\n\r\ntype MapStateProps = {\r\n    dialogsPage: InitialStateDialogs\r\n}\r\ntype MapDispatchProps = {\r\n    addMessage: (text: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {addMessage})\r\n)(Dialogs)","import React, {useEffect, useState} from 'react'\r\nimport classes from './ProfileInfo.module.scss'\r\nimport {ThunkActionProfileType} from '../../../redux/profilePage-reducer'\r\n\r\ntype Props = {\r\n    status: string\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n    ifOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<Props> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusUser(status)\r\n    }\r\n\r\n    const onChangeStatus = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    if (!props.ifOwner)\r\n        return <span>{props.status || '---'}</span>\r\n\r\n    return (\r\n        <>\r\n\r\n            {!editMode &&\r\n            <div>\r\n                <span className={classes.status} onDoubleClick={onEditMode}>{props.status || '---'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onChangeStatus} autoFocus={true} onBlur={offEditMode}\r\n                       value={status}/>\r\n            </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react'\r\nimport {UserProfileType} from '../../../types/types'\r\nimport {useForm} from 'react-hook-form'\r\nimport Button from '../../Common/Button/Button'\r\n\r\ntype FormData = UserProfileType\r\n\r\ntype LoginFormOwnProps = {\r\n    profile: UserProfileType | null\r\n    onSubmit: (formData: FormData) => void\r\n}\r\n\r\nconst ProfileDataForm: React.FC<LoginFormOwnProps> = ({profile, onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<FormData>()\r\n\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div><b>Full name</b> <input defaultValue={profile?.fullName} name='fullName' type='text'\r\n                                         placeholder={'Full name'}\r\n                                         ref={register({maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                {errors.fullName && <p>{errors.fullName.message}</p>}\r\n            </div>\r\n            <div><b>About me</b> <input defaultValue={profile?.aboutMe} name='aboutMe' type='text'\r\n                                        placeholder={'Full name'}\r\n                                        ref={register({maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                {errors.aboutMe && <p>{errors.aboutMe.message}</p>}\r\n            </div>\r\n            <div><b>Looking for a job</b> <input name={'lookingForAJob'} type='checkbox'\r\n                                                 ref={register({\r\n                                                     maxLength: {value: 20, message: 'Exceeded the limit'}\r\n                                                 })}/>\r\n                {errors.lookingForAJob && <p>{errors.lookingForAJob.message}</p>}\r\n            </div>\r\n            <div><b>Looking for a job description</b><br/> <textarea defaultValue={profile?.lookingForAJobDescription}\r\n                                                                     name='lookingForAJobDescription'\r\n                                                                     placeholder={'Looking for a job description'}\r\n                                                                     ref={register({\r\n                                                                         maxLength: {\r\n                                                                             value: 20,\r\n                                                                             message: 'Exceeded the limit'\r\n                                                                         }\r\n                                                                     })}/>\r\n                {errors.lookingForAJobDescription && <p>{errors.lookingForAJobDescription.message}</p>}\r\n            </div>\r\n            <div><b>Contacts:</b> {profile && Object.keys(profile.contacts).map(key => (\r\n                <div key={key}>\r\n                    <b>{key}</b> <input name={'contacts.' + key} placeholder={key} type=\"text\"\r\n                                        ref={register({maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                </div>))} </div>\r\n            <Button name={'Save'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ProfileDataForm\r\n\r\n","import React, {useState} from 'react'\r\nimport styles from './ProfileInfo.module.scss'\r\nimport Preloader from '../../Common/Preloader/Preloader'\r\nimport withPhoto from './../../../assets/unnamed.jpg'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\r\nimport ProfileDataForm from './ProfileDataForm'\r\nimport {UserProfileType} from '../../../types/types'\r\nimport {ThunkActionProfileType} from '../../../redux/profilePage-reducer'\r\nimport cn from 'classnames'\r\nimport Button from '../../Common/Button/Button'\r\n\r\ntype Props = {\r\n    saveProfile: (userProfile: UserProfileType) => void\r\n    userProfile: UserProfileType | null\r\n    savePhoto: (photo: File) => ThunkActionProfileType\r\n    status: string\r\n    ifOwner: boolean\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n}\r\n\r\ntype FormData = UserProfileType\r\n\r\nconst ProfileInfo: React.FC<Props> = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onSubmit = (formData: FormData) => {\r\n        props.saveProfile(formData)\r\n            // @ts-ignore\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    const changeMainPhoto = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profileInfo}>\r\n            <div className={styles.profileInfo__picture}>\r\n                <img className={styles.profileInfo__img} src={props.userProfile.photos.large || withPhoto} alt=\"ava\"/>\r\n            </div>\r\n            <div className={styles.profileInfo__inputFile}>\r\n                {props.ifOwner &&\r\n                <input type={'file'} onClick={changeMainPhoto}/>}\r\n            </div>\r\n            <div className={cn(styles.profileInfo__description, styles.description)}>\r\n                <div className={styles.description__status}>\r\n                    <b>Status: </b><ProfileStatusWithHooks ifOwner={props.ifOwner} status={props.status}\r\n                                                           updateStatusUser={props.updateStatusUser}/>\r\n                </div>\r\n                <div className={styles.description__about}>\r\n                    {editMode\r\n                        ? <ProfileDataForm\r\n                            onSubmit={onSubmit}\r\n                            profile={props.userProfile}/>\r\n                        : <ProfileData editModeOn={() => {\r\n                            setEditMode(true)\r\n                        }} profile={props.userProfile} ifOwner={props.ifOwner}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsProfileData = {\r\n    profile: UserProfileType\r\n    ifOwner: boolean\r\n    editModeOn: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<PropsProfileData> = ({profile, ...props}) => {\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <div><b>Full name</b> {profile.fullName}</div>\r\n            <div><b>Looking for a job</b>{profile.lookingForAJob && profile.lookingForAJob ? ' Yes' : ' No'}</div>\r\n            <div><b>Looking for a job description</b><br/>{profile.lookingForAJobDescription}</div>\r\n            <div><b>Contacts:</b> {Object.keys(profile.contacts).map((key) => (\r\n                /*@ts-ignore*/\r\n                <Contact title={key} value={profile.contacts[key]} key={key}/>))} </div>\r\n            <div className={styles.profileData__btn}>{props.ifOwner && <Button name={'Edit'} handleClick={props.editModeOn} />}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PropsContact = {\r\n    title: string\r\n    value: string\r\n}\r\n\r\nconst Contact: React.FC<PropsContact> = ({title, value}) => {\r\n    return <div className={styles.contact}><b>{title}</b>{value}</div>\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react'\r\nimport styles from './Post.module.scss'\r\nimport myGirlfriend from '../../../../assets/myGirlfriend.jpg'\r\nimport cn from 'classnames'\r\n\r\ntype Props = {\r\n    message: string\r\n    counterLike: number\r\n}\r\n\r\nconst Post: React.FC<Props> = React.memo((props) => {\r\n    return (\r\n        <div className={styles.post}>\r\n            <div className={styles.post__img}>\r\n                <img className={styles.img}\r\n                     src={myGirlfriend} alt={'my girlfriend'}/>\r\n            </div>\r\n            <div className={cn(styles.post__content, styles.content)}>\r\n                <div className={styles.content__message}>{props.message}</div>\r\n                <div className={styles.content__like}>like {props.counterLike}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Post\r\n","import React from 'react'\r\nimport styles from './Send.module.scss'\r\nimport {useForm} from 'react-hook-form'\r\nimport Textarea from '../../../Common/Textarea/Textarea'\r\nimport Button from '../../../Common/Button/Button'\r\n\r\ntype PropsSendPost = {\r\n    onSubmit: (data: LoginFormValues, e: any) => void\r\n}\r\n\r\nconst SendPost: React.FC<PropsSendPost> = ({onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<LoginFormValues>()\r\n\r\n    const required = 'This fields is required'\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={styles.postForm}>\r\n                <div className={styles.postForm__text}>\r\n                    <Textarea name={'messageText'} placeholder={'New post'}\r\n                              register={register({required, maxLength: {value: 20, message: 'Exceeded the limit'}})}/>\r\n                </div>\r\n                <div className={styles.postForm__btn}>\r\n                    {errors.messageText && <span className={styles.error}>{errors.messageText.message}</span>}\r\n                    <Button name={'Add post'}/>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype PropsSend = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\ntype LoginFormValues = {\r\n    messageText: string\r\n}\r\n\r\nconst Send: React.FC<PropsSend> = (props) => {\r\n\r\n    const addNewPost = (data: LoginFormValues, e: any) => {\r\n        e.target.reset()\r\n        props.addPost(data.messageText)\r\n    }\r\n\r\n    return <SendPost onSubmit={addNewPost}/>\r\n}\r\nexport default Send","import React from 'react'\r\nimport styles from './Wall.module.css'\r\nimport Post from './Post/Post'\r\nimport Send from './Send/Send'\r\nimport {PostDataType} from '../../../types/types'\r\n\r\ntype Props = {\r\n    postsData: Array<PostDataType>\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nconst Wall: React.FC<Props> = ({postsData, addPost}) => {\r\n\r\n    const postsElement = postsData\r\n        .map((p) => <Post counterLike={p.counterLike} message={p.message} key={p.id}/>)\r\n\r\n    return (\r\n        <div className={styles.posts}>\r\n            <div className={styles.posts__postForm}>\r\n                <Send addPost={addPost}/>\r\n            </div>\r\n            <div className={styles.posts__element}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Wall","import React from 'react'\r\nimport Wall from './Wall'\r\nimport {connect} from 'react-redux'\r\nimport {actionsProfile} from '../../../redux/profilePage-reducer'\r\nimport {AppState} from '../../../redux/redux-store'\r\nimport {PostDataType} from '../../../types/types'\r\n\r\nconst addPost = actionsProfile.addPost\r\n\r\ntype MapStateToProps = {\r\n    postsData: Array<PostDataType>\r\n}\r\n\r\ntype MapDispatchToProps = {\r\n    addPost: (newPost: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateToProps => {\r\n    return {\r\n        postsData: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nexport default connect<MapStateToProps, MapDispatchToProps, null, AppState>(mapStateToProps, {addPost})\r\n(Wall)","import React from 'react'\r\nimport styles from './Profile.module.scss'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport WallContainer from './wall/WallContainer'\r\nimport {UserProfileType} from '../../types/types'\r\nimport {ThunkActionProfileType} from '../../redux/profilePage-reducer'\r\nimport Preloader from '../Common/Preloader/Preloader'\r\n\r\n\r\ntype Props = {\r\n    saveProfile: (userProfile: UserProfileType) => ThunkActionProfileType\r\n    ifOwner: boolean\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n    savePhoto: (photo: File) => ThunkActionProfileType\r\n}\r\n\r\nconst Profile: React.FC<Props> = (props) => {\r\n\r\n\r\n    if (!props.userProfile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            <div className={styles.profile__info}>\r\n                <ProfileInfo saveProfile={props.saveProfile}\r\n                             ifOwner={props.ifOwner}\r\n                             savePhoto={props.savePhoto}\r\n                             userProfile={props.userProfile}\r\n                             status={props.status}\r\n                             updateStatusUser={props.updateStatusUser}\r\n                />\r\n            </div>\r\n            <div className={styles.profile__wall}>\r\n                {/*@ts-ignore*/}\r\n                <WallContainer/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom'\r\nimport {\r\n    getStatusUser,\r\n    getUser,\r\n    savePhoto,\r\n    saveProfile,\r\n    ThunkActionProfileType,\r\n    updateStatusUser\r\n} from '../../redux/profilePage-reducer'\r\nimport {compose} from 'redux'\r\nimport {AppState} from '../../redux/redux-store'\r\nimport {UserProfileType} from '../../types/types'\r\nimport {InitialStateAuth} from '../../redux/auth-reducer'\r\n\r\ntype AllProps = MapDispatchProps & MapStateProps & RouteComponentProps<any>\r\n\r\nclass ProfileContainer extends React.Component<AllProps> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.userId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUser(userId)\r\n        this.props.getStatusUser(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: AllProps) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     ifOwner={!this.props.match.params.userId}\r\n                     updateStatusUser={this.props.updateStatusUser}\r\n                     userProfile={this.props.userProfile}\r\n                     savePhoto={this.props.savePhoto}\r\n                     saveProfile={this.props.saveProfile}\r\n                     status={this.props.status}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateProps = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    userId: number | null\r\n    isAuth: boolean\r\n    auth: InitialStateAuth\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    getUser: (userId: number) => ThunkActionProfileType\r\n    getStatusUser: (userId: number) => ThunkActionProfileType\r\n    updateStatusUser: (status: string) => ThunkActionProfileType\r\n    savePhoto: (photo: File) => ThunkActionProfileType\r\n    saveProfile: (userProfile: UserProfileType) => ThunkActionProfileType\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => ({\r\n    userProfile: state.profilePage.userProfile,\r\n    status: state.profilePage.userStatus,\r\n    userId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n    auth: state.auth\r\n})\r\n\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {\r\n        getUser,\r\n        getStatusUser,\r\n        updateStatusUser,\r\n        savePhoto,\r\n        saveProfile\r\n    })\r\n)(ProfileContainer)\r\n","import React from 'react'\r\nimport styles from './Header.module.scss'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {InitialStateAuth} from '../../redux/auth-reducer'\r\nimport cn from 'classnames'\r\nimport Button from '../Common/Button/Button'\r\nimport logo from '../../assets/logo.png'\r\n\r\ntype Props = {\r\n    auth: InitialStateAuth\r\n    logout: () => void\r\n}\r\n\r\nconst Header: React.FC<Props> = (props) => {\r\n    return (\r\n        <header className={cn(styles.header, 'wrapper')}>\r\n            <div className=\"container\">\r\n                <div className={styles.headerWrapper}>\r\n                    <div className={styles.header__logo}>\r\n                        <img className={styles.img}\r\n                             src={logo} alt={'logo'}/>\r\n                    </div>\r\n                    <div className={styles.header__title}><span>Vnetakta</span></div>\r\n                    <div className={cn(styles.header__login, styles.login)}>\r\n                        {props.auth.isAuth ?\r\n                            <div className={cn(styles.login__of, styles.of)}>\r\n                                <span className={styles.of__name}>\r\n                                    {props.auth.login}\r\n                                </span>\r\n                                <div className={styles.of__button}>\r\n                                    <Button name={'Log uot'} handleClick={props.logout}/>\r\n                                </div>\r\n                            </div>\r\n                            : <div className={styles.login__on}>\r\n                                <NavLink to={'/login'}>Login</NavLink>\r\n                            </div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Header from './Header'\r\nimport {connect} from 'react-redux'\r\nimport {InitialStateAuth, logoutUser} from '../../redux/auth-reducer'\r\nimport {compose} from 'redux'\r\nimport {AppState} from '../../redux/redux-store'\r\n\r\ntype MapStateProps = {\r\n    auth: InitialStateAuth\r\n}\r\n\r\ntype MapDispatchProps = {\r\n    logoutUser: () => void\r\n}\r\n\r\ntype Props = MapStateProps & MapDispatchProps\r\n\r\nclass HeaderContainer extends React.Component<Props> {\r\n\r\n    render() {\r\n        return <Header logout={this.props.logoutUser} {...this.props}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {logoutUser})\r\n)(HeaderContainer)\r\n","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {loginUser} from '../../redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {AppState} from '../../redux/redux-store'\r\nimport {useForm} from 'react-hook-form'\r\nimport styles from './Login.module.scss'\r\nimport Button from '../Common/Button/Button'\r\n\r\ntype Props = {\r\n    captchaUrl: string | null\r\n    onSubmit: ({email, password, rememberMe, captcha}: LoginFormValues) => void\r\n}\r\n\r\nconst LoginForm: React.FC<Props> = ({captchaUrl, onSubmit}) => {\r\n\r\n    const {register, handleSubmit, errors} = useForm<LoginFormValues>()\r\n\r\n    const required = 'This fields is required'\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div className={styles.wrapperInput}>\r\n                <input className={styles.inputLogin} name='email' type='email' placeholder={'email'}\r\n                       ref={register({required})}/>\r\n                {errors.email && <div className={styles.error}>{errors.email.message}</div>}\r\n            </div>\r\n            <div className={styles.wrapperInput}>\r\n                <input className={styles.inputLogin} name='password' type='password' placeholder={'password'}\r\n                       ref={register({required})}/>\r\n                {errors.password && <div className={styles.error}>{errors.password.message}</div>}\r\n            </div>\r\n            <div>\r\n                <label className={styles.labelCheck} htmlFor='loginCheck'>\r\n                    <input id='loginCheck' name='rememberMe' className={styles.checkbox} type='checkbox'\r\n                           ref={register}/>\r\n                    <span className={styles.fakeCheck}></span>\r\n                    <span className={styles.textLabel}>Remember me</span>\r\n                </label>\r\n            </div>\r\n            {captchaUrl && <> <img src={captchaUrl} alt={'captcha'}/><br/> <input name={'captcha'}\r\n                                                                  placeholder={'captcha'} ref={register}/></>}\r\n                <Button name={'Login'}/>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype MapStateProps = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\ntype MapDispatchProps = {\r\n    loginUser: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\n\r\ntype LoginFormValues = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\n\r\nconst Login: React.FC<MapStateProps & MapDispatchProps> = (props) => {\r\n\r\n    const onSubmit = ({email, password, rememberMe, captcha}: LoginFormValues) => {\r\n        props.loginUser(email, password, rememberMe, captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n            <div className={styles.login}>\r\n                <h3 className={styles.login__title}>Login</h3>\r\n                <div className={styles.login__content}>\r\n                    <LoginForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState): MapStateProps => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n\r\nexport default connect<MapStateProps, MapDispatchProps, null, AppState>(mapStateToProps, {loginUser})(Login)","import React, {Suspense} from 'react'\r\nimport './App.scss'\r\nimport NavBar from './components/Navbar/NavBar'\r\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport News from './components/News/News'\r\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\r\nimport ProfileContainer from './components/profile/ProfileContainer'\r\nimport HeaderContainer from './components/Header/HeaderContainer'\r\nimport Login from './components/Login/Login'\r\nimport {connect} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {initializeApp} from './redux/App-reducer'\r\nimport Preloader from './components/Common/Preloader/Preloader'\r\n\r\nconst FriendsContainer = React.lazy(() => import('./components/Friends/FriendsContainer'))\r\n\r\n\r\nclass App extends React.Component {\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Preloader/>\r\n        return (\r\n            <>\r\n                <HeaderContainer/>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"container\">\r\n                        <div className='app'>\r\n                            <div className=\"app__nav\">\r\n                                <NavBar/>\r\n                            </div>\r\n                            <div className=\"app__content\">\r\n                                <Suspense fallback={<div>Загрузка...</div>}>\r\n                                    <Switch>\r\n                                        <Route path='/Profile/:userId?'\r\n                                               render={() => <ProfileContainer/>}/>\r\n\r\n                                        <Route path='/Dialogs'\r\n                                               render={() => <DialogsContainer/>}/>\r\n\r\n                                        <Route path='/News' render={() => <News/>}/>\r\n\r\n                                        <Route path='/Friends' render={() => <FriendsContainer/>}/>\r\n                                        <Route path='/Login' render={() => <Login/>}/>\r\n                                        <Redirect form={'/'} to={'/profile'}/>\r\n                                    </Switch>\r\n                                </Suspense>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {initializeApp}),\r\n    withRouter\r\n)(App)\r\n","import React from 'react'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport store from './redux/redux-store'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport {Provider} from 'react-redux'\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}